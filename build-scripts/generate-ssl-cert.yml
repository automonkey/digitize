---

- hosts: all
  vars:
    env: ""
    gandi_api_key: ""
    fqdn: "www.{{ (env != 'prod') | ternary(env + '.','') }}digitize.benyon.io"
    dir: "{{ lookup('env','PWD') }}"
    acme_url_prod: "https://acme-v02.api.letsencrypt.org/directory"
    acme_url_staging: "https://acme-staging-v02.api.letsencrypt.org/directory"
    acme_url: "{{ acme_url_prod }}"
    cert_generation_files_dir: "{{ dir }}/ssl_cert_generation_files"
  tasks:
    - name: assert required variables exist
      assert:
        that:
          - env != ""
          - gandi_api_key != ""

    - name: ensure cert generation files dir exists
      file:
        path: "{{ cert_generation_files_dir }}"
        state: directory

    - name: generate Lets Encrypt operation private key
      openssl_privatekey:
        path: "{{ cert_generation_files_dir }}/account.pem"
        size: 2048

    - name: generate cert private key
      openssl_privatekey:
        path: "{{ cert_generation_files_dir }}/{{ fqdn }}.pem"
        size: 2048

    - name: create CSR for service
      openssl_csr:
        path: "{{ cert_generation_files_dir }}/{{ fqdn }}.csr"
        privatekey_path: "{{ cert_generation_files_dir }}/{{ fqdn }}.pem"
        country_name: UK
        locality_name: London
        common_name: "{{ fqdn }}"
        organization_name: Benyon.io
        organizational_unit_name: Digitize

    - name: get the Lets Encrypt challenge
      acme_certificate:
        acme_version: 2
        acme_directory: "{{ acme_url }}"
        account_key: "{{ cert_generation_files_dir }}/account.pem"
        csr: "{{ cert_generation_files_dir }}/{{ fqdn }}.csr"
        dest: "{{ cert_generation_files_dir }}/{{ fqdn }}.crt"
        challenge: dns-01
        remaining_days: 2
        terms_agreed: yes
      register: dns_challenge
      retries: 10
      delay: 5

    - name: create DNS record for challenge
      uri:
        method: POST
        headers:
          Authorization: "Apikey {{ gandi_api_key }}"
        body_format: json
        body:
          rrset_ttl: 300
          rrset_values: ["{{ item.value['dns-01']['resource_value'] }}"]
        url: "https://api.gandi.net/v5/livedns/domains/benyon.io/records/{{ item.value['dns-01']['resource'] }}.{{ item.key | regex_replace('\\.benyon\\.io$', '') }}/TXT"
        status_code: 200, 201
      with_dict: "{{ dns_challenge['challenge_data'] | default({}) }}"

    - name: allow Gandi DNS time to stabalise
      pause:
        seconds: 3

    - name: respond to Lets Encrypt challenge
      acme_certificate:
        acme_version: 2
        acme_directory: "{{ acme_url }}"
        account_key: "{{ cert_generation_files_dir }}/account.pem"
        csr: "{{ cert_generation_files_dir }}/{{ fqdn }}.csr"
        dest: "{{ cert_generation_files_dir }}/{{ fqdn }}.crt"
        challenge: dns-01
        remaining_days: 2
        terms_agreed: yes
        data: "{{ dns_challenge }}"
      retries: 10
      delay: 5

    - name: cleanup DNS record for challenge
      uri:
        method: DELETE
        headers:
          Authorization: "Apikey {{ gandi_api_key }}"
        url: "https://api.gandi.net/v5/livedns/domains/benyon.io/records/{{ item.value['dns-01']['resource'] }}.{{ item.key | regex_replace('\\.benyon\\.io$', '') }}/TXT"
        status_code: 204
      with_dict: "{{ dns_challenge['challenge_data'] | default({}) }}"

    - name: get Certificate Chain from Lets Encrypt
      get_url:
        url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt
        dest: "{{ cert_generation_files_dir }}/chain.pem"

    - name: upload cert to AWS Certificate Manager
      command: >
        aws acm import-certificate
        --certificate file://{{ cert_generation_files_dir }}/{{ fqdn }}.crt
        --certificate-chain file://{{ cert_generation_files_dir }}/chain.pem
        --private-key file://{{ cert_generation_files_dir }}/{{ fqdn }}.pem
        --region us-east-1
        --output text
      register: acm_cert_import

    - debug:
        msg: "Uploaded cert Arn: {{ acm_cert_import.stdout }}"

    - name: store record of latest cert
      command: >
        aws ssm put-parameter
        --name digitize-{{ env }}-latest-ssl-cert
        --description "The latest generated cert for {{ fqdn }}"
        --type String
        --value "{{ acm_cert_import.stdout }}"
        --region eu-west-2
        --overwrite

    - name: Clean up cert generation files dir
      file:
        state: absent
        path: "{{ cert_generation_files_dir }}"
